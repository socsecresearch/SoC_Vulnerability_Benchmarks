
main.elf:     file format elf32-littleriscv


Disassembly of section .text:

00000000 <__crt0_entry>:
   0:	30005073          	csrwi	mstatus,0

00000004 <__crt0_cpu_csr_init>:
   4:	30401073          	csrw	mie,zero
   8:	00000097          	auipc	ra,0x0
   c:	0ec08093          	addi	ra,ra,236 # f4 <__crt0_trap_handler>
  10:	30509073          	csrw	mtvec,ra

00000014 <__crt0_pointer_init>:
  14:	80002117          	auipc	sp,0x80002
  18:	fe810113          	addi	sp,sp,-24 # 80001ffc <__crt0_stack_begin+0x0>
  1c:	80000197          	auipc	gp,0x80000
  20:	7e418193          	addi	gp,gp,2020 # 80000800 <__crt0_stack_begin+0xffffe804>

00000024 <__crt0_reg_file_init>:
  24:	00000213          	li	tp,0
  28:	00000293          	li	t0,0
  2c:	00000313          	li	t1,0
  30:	00000393          	li	t2,0
  34:	00000413          	li	s0,0
  38:	00000493          	li	s1,0
  3c:	00000813          	li	a6,0
  40:	00000893          	li	a7,0
  44:	00000913          	li	s2,0
  48:	00000993          	li	s3,0
  4c:	00000a13          	li	s4,0
  50:	00000a93          	li	s5,0
  54:	00000b13          	li	s6,0
  58:	00000b93          	li	s7,0
  5c:	00000c13          	li	s8,0
  60:	00000c93          	li	s9,0
  64:	00000d13          	li	s10,0
  68:	00000d93          	li	s11,0
  6c:	00000e13          	li	t3,0
  70:	00000e93          	li	t4,0
  74:	00000f13          	li	t5,0
  78:	00000f93          	li	t6,0

0000007c <__crt0_copy_data>:
  7c:	40000593          	li	a1,1024
  80:	80000617          	auipc	a2,0x80000
  84:	f8060613          	addi	a2,a2,-128 # 80000000 <__crt0_stack_begin+0xffffe004>
  88:	80000697          	auipc	a3,0x80000
  8c:	f7868693          	addi	a3,a3,-136 # 80000000 <__crt0_stack_begin+0xffffe004>
  90:	00c58e63          	beq	a1,a2,ac <__crt0_clear_bss>

00000094 <__crt0_copy_data_loop>:
  94:	00d65c63          	bge	a2,a3,ac <__crt0_clear_bss>
  98:	0005a703          	lw	a4,0(a1)
  9c:	00e62023          	sw	a4,0(a2)
  a0:	00458593          	addi	a1,a1,4
  a4:	00460613          	addi	a2,a2,4
  a8:	fedff06f          	j	94 <__crt0_copy_data_loop>

000000ac <__crt0_clear_bss>:
  ac:	80000717          	auipc	a4,0x80000
  b0:	f5470713          	addi	a4,a4,-172 # 80000000 <__crt0_stack_begin+0xffffe004>
  b4:	80000797          	auipc	a5,0x80000
  b8:	f4c78793          	addi	a5,a5,-180 # 80000000 <__crt0_stack_begin+0xffffe004>

000000bc <__crt0_clear_bss_loop>:
  bc:	00f75863          	bge	a4,a5,cc <__crt0_clear_bss_loop_end>
  c0:	00072023          	sw	zero,0(a4)
  c4:	00470713          	addi	a4,a4,4
  c8:	ff5ff06f          	j	bc <__crt0_clear_bss_loop>

000000cc <__crt0_clear_bss_loop_end>:
  cc:	00000513          	li	a0,0
  d0:	00000593          	li	a1,0
  d4:	06c000ef          	jal	ra,140 <main>

000000d8 <__crt0_main_exit>:
  d8:	30401073          	csrw	mie,zero
  dc:	34051073          	csrw	mscratch,a0

000000e0 <__crt0_main_aftermath>:
  e0:	00000093          	li	ra,0
  e4:	00008463          	beqz	ra,ec <__crt0_main_aftermath_end>
  e8:	000080e7          	jalr	ra

000000ec <__crt0_main_aftermath_end>:
  ec:	10500073          	wfi
  f0:	ffdff06f          	j	ec <__crt0_main_aftermath_end>

000000f4 <__crt0_trap_handler>:
  f4:	ff810113          	addi	sp,sp,-8
  f8:	00812023          	sw	s0,0(sp)
  fc:	00912223          	sw	s1,4(sp)
 100:	34202473          	csrr	s0,mcause
 104:	02044663          	bltz	s0,130 <__crt0_trap_handler_end>
 108:	34102473          	csrr	s0,mepc
 10c:	00041483          	lh	s1,0(s0)
 110:	0034f493          	andi	s1,s1,3
 114:	00240413          	addi	s0,s0,2
 118:	34141073          	csrw	mepc,s0
 11c:	00300413          	li	s0,3
 120:	00941863          	bne	s0,s1,130 <__crt0_trap_handler_end>
 124:	34102473          	csrr	s0,mepc
 128:	00240413          	addi	s0,s0,2
 12c:	34141073          	csrw	mepc,s0

00000130 <__crt0_trap_handler_end>:
 130:	00012403          	lw	s0,0(sp)
 134:	00412483          	lw	s1,4(sp)
 138:	00810113          	addi	sp,sp,8
 13c:	30200073          	mret

00000140 <main>:
 *
 * @note This program requires the GPIO controller to be synthesized.
 *
 * @return Will never return.
 **************************************************************************/
int main() {
 140:	ff010113          	addi	sp,sp,-16

  // clear GPIO output (set all bits to 0)
  neorv32_gpio_port_set(0);
 144:	00000513          	li	a0,0
 148:	00000593          	li	a1,0
int main() {
 14c:	00112623          	sw	ra,12(sp)
 150:	00812423          	sw	s0,8(sp)
  neorv32_gpio_port_set(0);
 154:	120000ef          	jal	ra,274 <neorv32_gpio_port_set>

  int cnt = 0;
 158:	00000513          	li	a0,0

  while (1) {
    neorv32_gpio_port_set(cnt++ & 0xFF); // increment counter and mask for lowest 8 bit
 15c:	00150413          	addi	s0,a0,1
 160:	00000593          	li	a1,0
 164:	0ff57513          	zext.b	a0,a0
 168:	10c000ef          	jal	ra,274 <neorv32_gpio_port_set>
    neorv32_cpu_delay_ms(250); // wait 250ms using busy wait
 16c:	0fa00513          	li	a0,250
 170:	020000ef          	jal	ra,190 <neorv32_cpu_delay_ms>
    neorv32_gpio_port_set(cnt++ & 0xFF); // increment counter and mask for lowest 8 bit
 174:	00040513          	mv	a0,s0
 178:	fe5ff06f          	j	15c <main+0x1c>

0000017c <neorv32_cpu_get_cycle>:
 **************************************************************************/
inline uint32_t __attribute__ ((always_inline)) neorv32_cpu_csr_read(const int csr_id) {

  uint32_t csr_data;

  asm volatile ("csrr %[result], %[input_i]" : [result] "=r" (csr_data) : [input_i] "i" (csr_id));
 17c:	c80027f3          	rdcycleh	a5
 180:	c0002573          	rdcycle	a0
 184:	c80025f3          	rdcycleh	a1
  uint32_t tmp1, tmp2, tmp3;
  while(1) {
    tmp1 = neorv32_cpu_csr_read(CSR_CYCLEH);
    tmp2 = neorv32_cpu_csr_read(CSR_CYCLE);
    tmp3 = neorv32_cpu_csr_read(CSR_CYCLEH);
    if (tmp1 == tmp3) {
 188:	fef59ae3          	bne	a1,a5,17c <neorv32_cpu_get_cycle>

  cycles.uint32[0] = tmp2;
  cycles.uint32[1] = tmp3;

  return cycles.uint64;
}
 18c:	00008067          	ret

00000190 <neorv32_cpu_delay_ms>:
 * the MTIME system timer is used if available. A simple loop is used as
 * alternative fall-back (imprecise!).
 *
 * @param[in] time_ms Time in ms to wait (unsigned 32-bit).
 **************************************************************************/
void neorv32_cpu_delay_ms(uint32_t time_ms) {
 190:	fe010113          	addi	sp,sp,-32
 194:	00a12623          	sw	a0,12(sp)

  uint32_t clock = NEORV32_SYSINFO->CLK; // clock ticks per second
 198:	e0002503          	lw	a0,-512(zero) # fffffe00 <__crt0_stack_begin+0x7fffde04>
  clock = clock / 1000; // clock ticks per ms
 19c:	3e800593          	li	a1,1000
void neorv32_cpu_delay_ms(uint32_t time_ms) {
 1a0:	00112e23          	sw	ra,28(sp)
 1a4:	00812c23          	sw	s0,24(sp)
 1a8:	00912a23          	sw	s1,20(sp)
  clock = clock / 1000; // clock ticks per ms
 1ac:	1a8000ef          	jal	ra,354 <__hidden___udivsi3>
  uint64_t wait_cycles = ((uint64_t)clock) * ((uint64_t)time_ms);
 1b0:	00c12603          	lw	a2,12(sp)
 1b4:	00000693          	li	a3,0
 1b8:	00000593          	li	a1,0
 1bc:	104000ef          	jal	ra,2c0 <__muldi3>
 1c0:	00050413          	mv	s0,a0
 1c4:	00058493          	mv	s1,a1
 1c8:	fc0027f3          	csrr	a5,0xfc0
  uint64_t tmp = 0;

  // use CYCLE CSRs
  // -------------------------------------------
  if ( (neorv32_cpu_csr_read(CSR_MXISA) & (1<<CSR_MXISA_ZICNTR)) && // cycle counter available?
 1cc:	0807f793          	andi	a5,a5,128
 1d0:	04078463          	beqz	a5,218 <neorv32_cpu_delay_ms+0x88>
 1d4:	320027f3          	csrr	a5,mcountinhibit
       ((neorv32_cpu_csr_read(CSR_MCOUNTINHIBIT) & (1<<CSR_MCOUNTINHIBIT_CY)) == 0) ) { // counter is running?
 1d8:	0017f793          	andi	a5,a5,1
  if ( (neorv32_cpu_csr_read(CSR_MXISA) & (1<<CSR_MXISA_ZICNTR)) && // cycle counter available?
 1dc:	02079e63          	bnez	a5,218 <neorv32_cpu_delay_ms+0x88>

    tmp = neorv32_cpu_get_cycle() + wait_cycles;
 1e0:	f9dff0ef          	jal	ra,17c <neorv32_cpu_get_cycle>
 1e4:	00850433          	add	s0,a0,s0
 1e8:	00a43533          	sltu	a0,s0,a0
 1ec:	009585b3          	add	a1,a1,s1
 1f0:	00b504b3          	add	s1,a0,a1
    while (neorv32_cpu_get_cycle() < tmp);
 1f4:	f89ff0ef          	jal	ra,17c <neorv32_cpu_get_cycle>
 1f8:	fe95eee3          	bltu	a1,s1,1f4 <neorv32_cpu_delay_ms+0x64>
 1fc:	00b49463          	bne	s1,a1,204 <neorv32_cpu_delay_ms+0x74>
 200:	fe856ae3          	bltu	a0,s0,1f4 <neorv32_cpu_delay_ms+0x64>
                  " nop                                              \n" // 2 cycles
                  " j    __neorv32_cpu_delay_ms_start                \n" // 6 cycles
                  " __neorv32_cpu_delay_ms_end: "
                  : [cnt_w] "=r" (iterations) : [cnt_r] "r" (iterations));
  }
}
 204:	01c12083          	lw	ra,28(sp)
 208:	01812403          	lw	s0,24(sp)
 20c:	01412483          	lw	s1,20(sp)
 210:	02010113          	addi	sp,sp,32
 214:	00008067          	ret
  else if (NEORV32_SYSINFO->SOC & (1 << SYSINFO_SOC_IO_MTIME)) { // MTIME timer available?
 218:	e0802783          	lw	a5,-504(zero) # fffffe08 <__crt0_stack_begin+0x7fffde0c>
 21c:	00010737          	lui	a4,0x10
 220:	00e7f7b3          	and	a5,a5,a4
 224:	02078663          	beqz	a5,250 <neorv32_cpu_delay_ms+0xc0>
    tmp = neorv32_mtime_get_time() + wait_cycles;
 228:	05c000ef          	jal	ra,284 <neorv32_mtime_get_time>
 22c:	00850433          	add	s0,a0,s0
 230:	00a43533          	sltu	a0,s0,a0
 234:	009585b3          	add	a1,a1,s1
 238:	00b504b3          	add	s1,a0,a1
    while (neorv32_mtime_get_time() < tmp);
 23c:	048000ef          	jal	ra,284 <neorv32_mtime_get_time>
 240:	fe95eee3          	bltu	a1,s1,23c <neorv32_cpu_delay_ms+0xac>
 244:	fcb490e3          	bne	s1,a1,204 <neorv32_cpu_delay_ms+0x74>
 248:	fe856ae3          	bltu	a0,s0,23c <neorv32_cpu_delay_ms+0xac>
 24c:	fb9ff06f          	j	204 <neorv32_cpu_delay_ms+0x74>
    uint32_t iterations = (uint32_t)(wait_cycles / loop_cycles_c);
 250:	01c49493          	slli	s1,s1,0x1c
 254:	00445413          	srli	s0,s0,0x4
 258:	0084e433          	or	s0,s1,s0

0000025c <__neorv32_cpu_delay_ms_start>:
    asm volatile (" .balign 4                                        \n" // make sure this is 32-bit aligned
 25c:	00040a63          	beqz	s0,270 <__neorv32_cpu_delay_ms_end>
 260:	00040863          	beqz	s0,270 <__neorv32_cpu_delay_ms_end>
 264:	fff40413          	addi	s0,s0,-1
 268:	00000013          	nop
 26c:	ff1ff06f          	j	25c <__neorv32_cpu_delay_ms_start>

00000270 <__neorv32_cpu_delay_ms_end>:
}
 270:	f95ff06f          	j	204 <neorv32_cpu_delay_ms+0x74>

00000274 <neorv32_gpio_port_set>:
    uint64_t uint64;
    uint32_t uint32[sizeof(uint64_t)/sizeof(uint32_t)];
  } data;

  data.uint64 = port_data;
  NEORV32_GPIO->OUTPUT_LO = data.uint32[0];
 274:	c0000793          	li	a5,-1024
 278:	00a7a423          	sw	a0,8(a5)
  NEORV32_GPIO->OUTPUT_HI = data.uint32[1];
 27c:	00b7a623          	sw	a1,12(a5)
}
 280:	00008067          	ret

00000284 <neorv32_mtime_get_time>:
    uint32_t uint32[sizeof(uint64_t)/sizeof(uint32_t)];
  } cycles;

  uint32_t tmp1, tmp2, tmp3;
  while(1) {
    tmp1 = NEORV32_MTIME->TIME_HI;
 284:	fffff737          	lui	a4,0xfffff
 288:	40472583          	lw	a1,1028(a4) # fffff404 <__crt0_stack_begin+0x7fffd408>
    tmp2 = NEORV32_MTIME->TIME_LO;
 28c:	40072503          	lw	a0,1024(a4)
    tmp3 = NEORV32_MTIME->TIME_HI;
 290:	40472783          	lw	a5,1028(a4)
    if (tmp1 == tmp3) {
 294:	fef59ae3          	bne	a1,a5,288 <neorv32_mtime_get_time+0x4>

  cycles.uint32[0] = tmp2;
  cycles.uint32[1] = tmp3;

  return cycles.uint64;
}
 298:	00008067          	ret

0000029c <__mulsi3>:
 29c:	00050613          	mv	a2,a0
 2a0:	00000513          	li	a0,0
 2a4:	0015f693          	andi	a3,a1,1
 2a8:	00068463          	beqz	a3,2b0 <__mulsi3+0x14>
 2ac:	00c50533          	add	a0,a0,a2
 2b0:	0015d593          	srli	a1,a1,0x1
 2b4:	00161613          	slli	a2,a2,0x1
 2b8:	fe0596e3          	bnez	a1,2a4 <__mulsi3+0x8>
 2bc:	00008067          	ret

000002c0 <__muldi3>:
 2c0:	00050e13          	mv	t3,a0
 2c4:	ff010113          	addi	sp,sp,-16
 2c8:	00068313          	mv	t1,a3
 2cc:	00112623          	sw	ra,12(sp)
 2d0:	00060513          	mv	a0,a2
 2d4:	000e0893          	mv	a7,t3
 2d8:	00060693          	mv	a3,a2
 2dc:	00000713          	li	a4,0
 2e0:	00000793          	li	a5,0
 2e4:	00000813          	li	a6,0
 2e8:	0016fe93          	andi	t4,a3,1
 2ec:	00171613          	slli	a2,a4,0x1
 2f0:	000e8a63          	beqz	t4,304 <__muldi3+0x44>
 2f4:	01088833          	add	a6,a7,a6
 2f8:	00e787b3          	add	a5,a5,a4
 2fc:	01183733          	sltu	a4,a6,a7
 300:	00f707b3          	add	a5,a4,a5
 304:	01f8d713          	srli	a4,a7,0x1f
 308:	0016d693          	srli	a3,a3,0x1
 30c:	00e66733          	or	a4,a2,a4
 310:	00189893          	slli	a7,a7,0x1
 314:	fc069ae3          	bnez	a3,2e8 <__muldi3+0x28>
 318:	00058663          	beqz	a1,324 <__muldi3+0x64>
 31c:	f81ff0ef          	jal	ra,29c <__mulsi3>
 320:	00a787b3          	add	a5,a5,a0
 324:	00030a63          	beqz	t1,338 <__muldi3+0x78>
 328:	000e0513          	mv	a0,t3
 32c:	00030593          	mv	a1,t1
 330:	f6dff0ef          	jal	ra,29c <__mulsi3>
 334:	00f507b3          	add	a5,a0,a5
 338:	00c12083          	lw	ra,12(sp)
 33c:	00080513          	mv	a0,a6
 340:	00078593          	mv	a1,a5
 344:	01010113          	addi	sp,sp,16
 348:	00008067          	ret

0000034c <__divsi3>:
 34c:	06054063          	bltz	a0,3ac <__umodsi3+0x10>
 350:	0605c663          	bltz	a1,3bc <__umodsi3+0x20>

00000354 <__hidden___udivsi3>:
 354:	00058613          	mv	a2,a1
 358:	00050593          	mv	a1,a0
 35c:	fff00513          	li	a0,-1
 360:	02060c63          	beqz	a2,398 <__hidden___udivsi3+0x44>
 364:	00100693          	li	a3,1
 368:	00b67a63          	bgeu	a2,a1,37c <__hidden___udivsi3+0x28>
 36c:	00c05863          	blez	a2,37c <__hidden___udivsi3+0x28>
 370:	00161613          	slli	a2,a2,0x1
 374:	00169693          	slli	a3,a3,0x1
 378:	feb66ae3          	bltu	a2,a1,36c <__hidden___udivsi3+0x18>
 37c:	00000513          	li	a0,0
 380:	00c5e663          	bltu	a1,a2,38c <__hidden___udivsi3+0x38>
 384:	40c585b3          	sub	a1,a1,a2
 388:	00d56533          	or	a0,a0,a3
 38c:	0016d693          	srli	a3,a3,0x1
 390:	00165613          	srli	a2,a2,0x1
 394:	fe0696e3          	bnez	a3,380 <__hidden___udivsi3+0x2c>
 398:	00008067          	ret

0000039c <__umodsi3>:
 39c:	00008293          	mv	t0,ra
 3a0:	fb5ff0ef          	jal	ra,354 <__hidden___udivsi3>
 3a4:	00058513          	mv	a0,a1
 3a8:	00028067          	jr	t0
 3ac:	40a00533          	neg	a0,a0
 3b0:	00b04863          	bgtz	a1,3c0 <__umodsi3+0x24>
 3b4:	40b005b3          	neg	a1,a1
 3b8:	f9dff06f          	j	354 <__hidden___udivsi3>
 3bc:	40b005b3          	neg	a1,a1
 3c0:	00008293          	mv	t0,ra
 3c4:	f91ff0ef          	jal	ra,354 <__hidden___udivsi3>
 3c8:	40a00533          	neg	a0,a0
 3cc:	00028067          	jr	t0

000003d0 <__modsi3>:
 3d0:	00008293          	mv	t0,ra
 3d4:	0005ca63          	bltz	a1,3e8 <__modsi3+0x18>
 3d8:	00054c63          	bltz	a0,3f0 <__modsi3+0x20>
 3dc:	f79ff0ef          	jal	ra,354 <__hidden___udivsi3>
 3e0:	00058513          	mv	a0,a1
 3e4:	00028067          	jr	t0
 3e8:	40b005b3          	neg	a1,a1
 3ec:	fe0558e3          	bgez	a0,3dc <__modsi3+0xc>
 3f0:	40a00533          	neg	a0,a0
 3f4:	f61ff0ef          	jal	ra,354 <__hidden___udivsi3>
 3f8:	40b00533          	neg	a0,a1
 3fc:	00028067          	jr	t0
