
my_main.elf:     file format elf32-littleriscv


Disassembly of section .text:

00000000 <__crt0_entry>:
   0:	30005073          	csrwi	mstatus,0

00000004 <__crt0_cpu_csr_init>:
   4:	30401073          	csrw	mie,zero
   8:	00000097          	auipc	ra,0x0
   c:	13408093          	addi	ra,ra,308 # 13c <__crt0_trap_handler>
  10:	30509073          	csrw	mtvec,ra

00000014 <__crt0_pointer_init>:
  14:	80002117          	auipc	sp,0x80002
  18:	fe810113          	addi	sp,sp,-24 # 80001ffc <__crt0_stack_begin+0x0>
  1c:	80000197          	auipc	gp,0x80000
  20:	7e418193          	addi	gp,gp,2020 # 80000800 <__crt0_stack_begin+0xffffe804>

00000024 <__crt0_reg_file_init>:
  24:	00000213          	li	tp,0
  28:	00000293          	li	t0,0
  2c:	00000313          	li	t1,0
  30:	00000393          	li	t2,0
  34:	00000413          	li	s0,0
  38:	00000493          	li	s1,0
  3c:	00000813          	li	a6,0
  40:	00000893          	li	a7,0
  44:	00000913          	li	s2,0
  48:	00000993          	li	s3,0
  4c:	00000a13          	li	s4,0
  50:	00000a93          	li	s5,0
  54:	00000b13          	li	s6,0
  58:	00000b93          	li	s7,0
  5c:	00000c13          	li	s8,0
  60:	00000c93          	li	s9,0
  64:	00000d13          	li	s10,0
  68:	00000d93          	li	s11,0
  6c:	00000e13          	li	t3,0
  70:	00000e93          	li	t4,0
  74:	00000f13          	li	t5,0
  78:	00000f93          	li	t6,0

0000007c <__crt0_copy_data>:
  7c:	1c800593          	li	a1,456
  80:	80000617          	auipc	a2,0x80000
  84:	f8060613          	addi	a2,a2,-128 # 80000000 <__crt0_stack_begin+0xffffe004>
  88:	80000697          	auipc	a3,0x80000
  8c:	f7868693          	addi	a3,a3,-136 # 80000000 <__crt0_stack_begin+0xffffe004>
  90:	00c58e63          	beq	a1,a2,ac <__crt0_clear_bss>

00000094 <__crt0_copy_data_loop>:
  94:	00d65c63          	bge	a2,a3,ac <__crt0_clear_bss>
  98:	0005a703          	lw	a4,0(a1)
  9c:	00e62023          	sw	a4,0(a2)
  a0:	00458593          	addi	a1,a1,4
  a4:	00460613          	addi	a2,a2,4
  a8:	fedff06f          	j	94 <__crt0_copy_data_loop>

000000ac <__crt0_clear_bss>:
  ac:	80000717          	auipc	a4,0x80000
  b0:	f5470713          	addi	a4,a4,-172 # 80000000 <__crt0_stack_begin+0xffffe004>
  b4:	80000797          	auipc	a5,0x80000
  b8:	f4c78793          	addi	a5,a5,-180 # 80000000 <__crt0_stack_begin+0xffffe004>

000000bc <__crt0_clear_bss_loop>:
  bc:	00f75863          	bge	a4,a5,cc <__crt0_call_constructors>
  c0:	00072023          	sw	zero,0(a4)
  c4:	00470713          	addi	a4,a4,4
  c8:	ff5ff06f          	j	bc <__crt0_clear_bss_loop>

000000cc <__crt0_call_constructors>:
  cc:	00000417          	auipc	s0,0x0
  d0:	0fc40413          	addi	s0,s0,252 # 1c8 <__etext>
  d4:	00000497          	auipc	s1,0x0
  d8:	0f448493          	addi	s1,s1,244 # 1c8 <__etext>

000000dc <__crt0_call_constructors_loop>:
  dc:	00945a63          	bge	s0,s1,f0 <__crt0_call_constructors_loop_end>
  e0:	00042083          	lw	ra,0(s0)
  e4:	000080e7          	jalr	ra
  e8:	00440413          	addi	s0,s0,4
  ec:	ff1ff06f          	j	dc <__crt0_call_constructors_loop>

000000f0 <__crt0_call_constructors_loop_end>:
  f0:	00000513          	li	a0,0
  f4:	00000593          	li	a1,0
  f8:	090000ef          	jal	ra,188 <main>

000000fc <__crt0_main_exit>:
  fc:	30401073          	csrw	mie,zero
 100:	34051073          	csrw	mscratch,a0

00000104 <__crt0_call_destructors>:
 104:	00000417          	auipc	s0,0x0
 108:	0c440413          	addi	s0,s0,196 # 1c8 <__etext>
 10c:	00000497          	auipc	s1,0x0
 110:	0bc48493          	addi	s1,s1,188 # 1c8 <__etext>

00000114 <__crt0_call_destructors_loop>:
 114:	00945a63          	bge	s0,s1,128 <__crt0_call_destructors_loop_end>
 118:	00042083          	lw	ra,0(s0)
 11c:	000080e7          	jalr	ra
 120:	00440413          	addi	s0,s0,4
 124:	ff1ff06f          	j	114 <__crt0_call_destructors_loop>

00000128 <__crt0_call_destructors_loop_end>:
 128:	00000093          	li	ra,0
 12c:	00008463          	beqz	ra,134 <__crt0_main_aftermath_end>
 130:	000080e7          	jalr	ra

00000134 <__crt0_main_aftermath_end>:
 134:	10500073          	wfi
 138:	ffdff06f          	j	134 <__crt0_main_aftermath_end>

0000013c <__crt0_trap_handler>:
 13c:	ff810113          	addi	sp,sp,-8
 140:	00812023          	sw	s0,0(sp)
 144:	00912223          	sw	s1,4(sp)
 148:	34202473          	csrr	s0,mcause
 14c:	02044663          	bltz	s0,178 <__crt0_trap_handler_end>
 150:	34102473          	csrr	s0,mepc
 154:	00041483          	lh	s1,0(s0)
 158:	0034f493          	andi	s1,s1,3
 15c:	00240413          	addi	s0,s0,2
 160:	34141073          	csrw	mepc,s0
 164:	00300413          	li	s0,3
 168:	00941863          	bne	s0,s1,178 <__crt0_trap_handler_end>
 16c:	34102473          	csrr	s0,mepc
 170:	00240413          	addi	s0,s0,2
 174:	34141073          	csrw	mepc,s0

00000178 <__crt0_trap_handler_end>:
 178:	00012403          	lw	s0,0(sp)
 17c:	00412483          	lw	s1,4(sp)
 180:	00810113          	addi	sp,sp,8
 184:	30200073          	mret

00000188 <main>:
#include <neorv32.h>
#include <string.h>


int main(){
 188:	ff010113          	addi	sp,sp,-16
 18c:	00112623          	sw	ra,12(sp)
 **************************************************************************/
inline uint32_t __attribute__ ((always_inline)) neorv32_cpu_csr_read(const int csr_id) {

  uint32_t csr_data;

  asm volatile ("csrr %[result], %[input_i]" : [result] "=r" (csr_data) : [input_i] "i" (csr_id));
 190:	c00027f3          	rdcycle	a5
	//neorv32_cpu_csr_set(CSR_MSTATUS, 1 << CSR_MSTATUS_MPIE);
	//code for user mode
	//neorv32_cpu_csr_set (CSR_MSTATUS, 1 << CSR_MSTATUS_TW);
	uint32_t a = (uint32_t)neorv32_cpu_csr_read(CSR_CYCLE);
	//neorv32_cpu_csr_write(CSR_MCOUNTEREN, 1);
	neorv32_cpu_goto_user_mode();
 194:	020000ef          	jal	ra,1b4 <neorv32_cpu_goto_user_mode>
 198:	c00027f3          	rdcycle	a5
 **************************************************************************/
inline void __attribute__ ((always_inline)) neorv32_cpu_csr_write(const int csr_id, uint32_t data) {

  uint32_t csr_data = data;

  asm volatile ("csrw %[input_i], %[input_j]" :  : [input_i] "i" (csr_id), [input_j] "r" (csr_data));
 19c:	00000793          	li	a5,0
 1a0:	c0079073          	csrw	cycle,a5
	a = (uint32_t)neorv32_cpu_csr_read(CSR_CYCLE);
	neorv32_cpu_csr_write(CSR_CYCLE, 0);
	//asm volatile ("wfi");
	return 0;
}
 1a4:	00c12083          	lw	ra,12(sp)
 1a8:	00000513          	li	a0,0
 1ac:	01010113          	addi	sp,sp,16
 1b0:	00008067          	ret

000001b4 <neorv32_cpu_goto_user_mode>:
 **************************************************************************/
void __attribute__((naked,noinline)) neorv32_cpu_goto_user_mode(void) {

  // make sure to use NO registers in here! -> naked

  asm volatile ("csrw  mepc, ra          \n" // move return address to mepc so we can return using "mret". also, we can now use ra as temp register
 1b4:	34109073          	csrw	mepc,ra
 1b8:	000020b7          	lui	ra,0x2
 1bc:	80008093          	addi	ra,ra,-2048 # 1800 <__etext+0x1638>
 1c0:	3000b073          	csrc	mstatus,ra
 1c4:	30200073          	mret
